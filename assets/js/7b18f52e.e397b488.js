"use strict";(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[3220],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),h=o,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||s;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},383:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const s={sidebar_label:"Non Fungible Token Drops",sidebar_position:3},a="Non-Fungible Token Drops",i={unversionedId:"Github ReadMe/Types of Drops/nftdrops",id:"Github ReadMe/Types of Drops/nftdrops",title:"Non-Fungible Token Drops",description:'Non-Fungible Token drops are a special type that allows users to "preload" the drop with NFTs.',source:"@site/docs/Github ReadMe/Types of Drops/nftdrops.md",sourceDirName:"Github ReadMe/Types of Drops",slug:"/Github ReadMe/Types of Drops/nftdrops",permalink:"/next/Github ReadMe/Types of Drops/nftdrops",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Github ReadMe/Types of Drops/nftdrops.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Non Fungible Token Drops",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Simple Drops",permalink:"/next/Github ReadMe/Types of Drops/simpledrops"},next:{title:"Fungible Token Drops",permalink:"/next/Github ReadMe/Types of Drops/ftdrops"}},l={},p=[{value:"How does it work?",id:"how-does-it-work",level:2},{value:"NFT Config",id:"nft-config",level:2},{value:"Use Cases",id:"use-cases",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"non-fungible-token-drops"},"Non-Fungible Token Drops"),(0,o.kt)("p",null,'Non-Fungible Token drops are a special type that allows users to "preload" the drop with NFTs.\nThese tokens will then be ',(0,o.kt)("em",{parentName:"p"},"automatically")," sent to the ",(0,o.kt)("strong",{parentName:"p"},"claiming user"),". The claiming flow\nis fairly similar to simple drops in that users can either create an account or claim to an\nexisting one."),(0,o.kt)("p",null,"NFT drops are essentially a wrapper around simple drops. All the functionalities that simple\ndrops have are carried over but now, users can receive an NFT as well as $NEAR. This brings\nintroduces some customization and uniqueness to the use-cases."),(0,o.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,o.kt)("p",null,"Every drop has a field known as ",(0,o.kt)("inlineCode",{parentName:"p"},"registered_uses"),". This tells the contract how many uses the\ndrop has across all its keys. For simple drops, this field doesn't matter since all the uses\nare paid for up-front when the drop is created or when keys are added. With NFT drops, however,\nthere is a 2 step process:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Firstly, the drop is created and all the $NEAR required is pre-paid for. This is the same as\nsimple drops, however, the ",(0,o.kt)("inlineCode",{parentName:"li"},"registered_uses")," are set to 0."),(0,o.kt)("li",{parentName:"ul"},"Once the drop is created, the owner must send the contract the NFTs in order for keys to be\nusable. This process is done through the ",(0,o.kt)("inlineCode",{parentName:"li"},"nft_transfer_call")," workflow baked into the NFT standards.\nIt's up to the owner to facilitate this process.")),(0,o.kt)("p",null,"Whenever the contract receives tokens, it will push the ID to a vector. These IDs are ",(0,o.kt)("strong",{parentName:"p"},"popped")," off\nwhenever a key is used. A user will receive the most recent token sent to the contract as the\nvector is acting like a ",(0,o.kt)("em",{parentName:"p"},"stack"),"."),(0,o.kt)("h2",{id:"nft-config"},"NFT Config"),(0,o.kt)("p",null,"Along with the default global configurations for drops, if you'd like to create an NFT drop,\nyou must specify the following pieces of information when the drop is created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct NFTDataConfig {\n    /// Which account ID will be sending the NFTs to the contract\n    pub sender_id: AccountId,\n    /// Which contract will the NFTs live on\n    pub contract_id: AccountId,\n}\n")),(0,o.kt)("p",null,"By specifying this information, the drop is locked into only accepting NFTs from the sender and contract."),(0,o.kt)("h2",{id:"use-cases"},"Use Cases"),(0,o.kt)("p",null,"NFT drops work really well for when you want to send a ",(0,o.kt)("em",{parentName:"p"},"pre-existing")," NFT to a user along with\nsome $NEAR. Since NFT drops are a light wrapper around simple drops, most of the use-cases are\nthe same although people can now get NFTs as well. This means you can onboard a user with some\n$NEAR ",(0,o.kt)("strong",{parentName:"p"},"and")," they ",(0,o.kt)("em",{parentName:"p"},"get an NFT")," too."))}u.isMDXComponent=!0}}]);